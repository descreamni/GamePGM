저는 10-1-1을 수정하는 프로그램을 만들어봤습니다.
우선 10-1-1을 구성하는 부분을 한번 분석해보겠습니다.

먼저 메인 == 키보드를 누르면 나갈 수 있도록
time to number == 시, 분, 초에 대한 내용을 long으로 받는 함수입니다.
라인 부분까지 출력을 해주는것
여기서는 time, localtime이 각각 핵심 코드라고 보시면 되는데요,
time은 시계의 위치를 출력하고, localtime은 시계 위치에서 날짜 정보를 가져온다.
Number check == 시간 체크하는 함수
Digit print == 실제 이미지를 출력하는 함수

gotoxy == 좌표 위치에 커서를 옮기는 함수


제가 가져온 코드는 처음 시작시 작동이 되지 않았습니다.
왜 그럴까, 고민하다 아차! 싶었습니다. 자세히 보니 파라미터의 이름을 잘못 썼더군요.
혹시나 파라미터만 적으면 될까, 싶어서 테스트 해보니, 출력 부분에서 각 칸이 밀려서
적히는 오류가 나타났습니다.

자, 여기서 정리할 수 있는 오류는 총 두가지, 파라미터의 이름, 잘못된 위치, 두가지가 있습
니다. 그럼 이 부분을 해결할 수 있는 방법은 뭘까요? 
위 오류 코드의 핵심은 가로로 쭉 입력되었기 때문에, 계산이 조금만 틀어지더라도 망가지게
되는 것이 문제입니다. 그럼, 이걸 해결할 수 있는 가장 쉬운 방법이 뭘까요?

 각 글자를 하나의 각기 다른 물체로 봅니다. 그리고, 그 숫자들의 위치를
계산으로 출력하면 아주 간단하지만 확실한 코드가 되지 않을까요?

그래서 해봤습니다. 각 숫자들마다 고유한 위치를 가질 수 있도록 하기 위해, 먼저 
1차원 배열의 숫자를 2차원 배열로 만들어 줬습니다. 그러면 x와 y좌표만 잘 잡아주면
해결되겠죠? 

출력되는 부분들에도 x와 y좌표들을 추가해줘서, 변수에 숫자만 넣어주면 바로 위치를 
바꿀 수 있도록 만들어 뒀습니다. 참 쉽죠?

다음에는 메뉴를 작성해 줬습니다. 껍데기가 이뻐야 쓸맛이 나겠죠. 각 메뉴구성은
시계, 스톱워치, 알람, 환경설정, 그리고 나가기를 만들었습니다.
각 문자들은 대소구분하지 않고 메뉴 이름을 적으면 바로 실행가능합니다.
그리고 각 메뉴들을 하나의 함수에 넣기엔 너무 많기 때문에, 제목마다 함수들을 만들어서
관리를 해줬습니다. 
ppt를 보시면, 좀 더러워 보일지도 모릅니다. 하지만 나중에 코드를 찾거나 함수를 뺄때
좀 더 편하겠죠.

자, 세팅도 됐으니, 다음은 시계 부분을 함수화 시켜야겠죠? 간단하게 파라미터 넣고,
나머지를 뙇! 하고 넣으면 만들어집니다. 어때요, 참 쉽죠?

이제 한번 추가 기능을 맨들어봐야죠.
한번 코드부터 볼까요?
아오 길다, 보기 싫네요. 그냥 이걸 슈도코드로 정리해버립시다.
정리해도 기네요. 좀 더 쉽게 설명해 드릴게요.
여기서 주목해야 할 부분이 clock() 함수입니다.
clock()함수는 함수를 선언한 순간부터 1000분의 1초씩 올라가는 특이한 함수입니다.
멈출수 없는것도 특징이죠. 그래서 현재 시간 변수를 잘 보시면, 항상 초기화 지점을 빼주고
있죠. 
그럼 초기화는 어떻게 해줄까요? 간단합니다. 현재 시간을 초기화할때 쓰는겁니다.
이 부분은 자주 쓰이기도 하니까 참고하시면 좋습니다.

다음은 Render 함수를 제작했습니다.
Render함수의 컨셉은, "보여줄 것들은 함께 처리하자"는 것입니다. 일일이 코드로 쳐주는것보다 이게 더 깔끔하겠죠.

자 이제 숫자 출력 부분을 한번 보겠습니다.
제가 받았던 코드에서는 1차원 배열로 출력했기 때문에, 각 숫자들의 위치를 잡는것이 매우 어려웠습니다. 그래서 위에서 작성한 2차원 배열을 이용하여 기존의 재귀 코드를 바꿔줬습니다.
개인적으로 저는 코드를 통제할 수 있는게 좋아서, 따로 오프셋 파라미터를 이용해서 재귀문의 순서를 알 수 있도록 했습니다. 그리고 각 순서마다 좌표를 지정해줘서 출력될 수 있도록 해줬습니다.
위의 재귀함수에서는 출력 순서가 왼쪽부터 오른쪽으로 출력이 됐습니다. 하지만 timer 함수를 만들기 위해서는 오른쪽부터 왼쪽으로 순서를 바꿔줘야 할 필요가 있었습니다. 그래서 만들었습니다. 이번에 만들어본 함수는 재귀 코드를 반복문 코드로 만들어줬습니다. 

구현할 때 제일 문제였던 것은, 타이머의 0부분을 어떻게 채워넣냐는 것이었습니다.
곰곰히 잘 생각해보니, 그냥 숫자를 역순으로 출력해서 좌표만 제대로 찍어주면 되는겁니다.
그리고 빈 부분을 전부 0으로 처리하면 되겠죠.

다음으로 넘어가죠. 예약 부분을 들어갑시다. 간단합니다. 전역변수를 선언해주고, 그 전역변수에 시간을 넣어주면 됩니다. 하지만 여기에는 큰 맹점이 있는데요, 전역변수를 사용해버리면, 다른 헤더 파일에서 정의한 변수들이랑 겹쳐지는 경우가 생길 수가 있습니다. 하지만 이번
에는 시간이 부족했던 관계로 전역변수를 사용했다는 점 이해해주시면 좋겠습니다.
이제 실제로 울리는 함수가 필요하겠죠?, Bell() 실제로 울리는 함수입니다. 간단하게 악보를 출력할 수 있도록 만들었습니다.

악보를 조금 더 효율적으로 사용하기 위해 저는 헤더를 하나 만들어줬습니다.
정의문을 이용해서 숫자를 불러오게끔 했고, 실제 피아노 주파수와 beep음의 주파수를 비교해서 만들었습니다. 실제 주파수와 3.9배정도의 차이가 있었기 때문에, 실제 주파수에 3.9를
곱해줬습니다. 실제 피아노 주파수를 일일이 조율하기에는 시간이 부족했기에, chatgpt에게 실제 주파수들을 가져와 진행했습니다.
 길이도 마찬가지로 쉽게 접근하도록 음표들을 짜줬습니다. 각각 60,  240bpm을 사용하는 코드들을 만들었습니다.

 악보를 적으면 받아올 수 있는 프로그램을 만들어 봤습니다만, 출력 형변환 부분에서 딱 걸려가지고 아쉽게 적용하지는 못했습니다. 그래도 코드에는 고스란히 담겨져도 있고, 파일입출력과 관련된 부분이 있어서 소개하고 싶어서 가져왔습니다.
 아이디어의 핵심 개념은, 구분자를 이용해서 각 숫자들을 읽어와 출력하는 것입니다. 사실 호환성을 위해서 실제 확장자처럼 만들어 보고 싶었는데,  지식이 부족해서 그냥 흉내만 내었습니다.

악보를 잘 출력하려면, 동적할당을 체계적으로 관리할 필요성이 있었고, 거기에 제일 적합한 자료구조가 큐 자료형이었습니다. 저는 예전에 공부하면서 만들어놓았던 코드를 보면서, 악보를 읽을 수 있도록 수정을 해 줬습니다.

마지막으로 config부분을 작성해줬습니다. 맘같아서는 위치 조정부터 도형 커스텀기능, 백그라운드 컬러를 구현하고 싶었는데, 성능이나, 콘솔창의 한계, 지식 부족으로 글자색 부분밖에 바꾸지 못했습니다.

뭐 뒤에 구현하고 싶은 부분에서 많이 적어놔서, 간단하게 보시면 될거같습니다.